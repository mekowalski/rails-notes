-Passwords are terrible for a few reasons
  1. You have to remember them, or user a pw manager
  2. On the server, all the passwords have to be managed
  3. Server-stored pws are not secure
  4. Manage pw changes, email verification and pw recovery

-If this was another entity's problem:
(Github, Facebook, Google, etc)
-The location in the world, the operating system being run, and numerous factors are being considered when
 being logged in via third party

OMNIAUTH
-Gem for Rails that allows use of multiple authentication providers alongside traditional username/pw setup

How OmniAuth works from User's standpoint
  1. User is redirected to a login page from yoursite.com
  2. Login page offers creating an account or login via Google or Twitter
  3. User clicks Login with Google, will briefly send user to /auth/google redirect for Google login page
  4. If user isn't already Google signed-in, they'll sign in and Google asks permission for yoursite.com
     to access user info
  5. If user agrees, they're redirected to /auth/google/callback and from there to the initial page they
     tried to access

OMNIAUTH WITH GOOGLE
-OAuth allows use of OAuth protocol with a number of many providers, only need to add OmniAuth gem and
 provider specific OAuth gem to gemfile(omniauth and omniauth-google)
-Run bundle install to update Gemfile
-Tell OAuth about app's OAuth credentials, creating a file named config/initializers/omniauth.rb
*refer to authentication branch of beer-log app*

ENV
-Refers to global hash for you're entire computer environment
-Store any key-value pairs in this hash, useful place to store credentials

1. Obtain OAuth 2.0 credentials from Google API Console
2. You may have to login into the Google account(i was already logged in)
3. Menu on left side of screen will have a key icon with the word Credentials attached
4. Blue drop-down menu names 'Create credentials', select 'OAuth Client ID'
5. Application type is Web Application
6. Name whatever you want to call this project with this OAuth client ID
7. Authorized origins will be the localhost from your terminal, (mine is 'localhost:3000')
8. Authorized redirect URIs will be 'localhost:3000/auth/provider/callback'
   (my provider is google, yours may be Github, Facebook, etc)
9. You'll then be provided with a small screen that has the Client ID and Secret
   (you can click on the name of the Project in Credentials list to view ID and Secret)

DOTENV-RAILS
-Instead of setting environment variables directly in local ENV hash, use dotenv-rails
-This is a great way to ensure environment variables are correctly loaded into ENV has securely
  1. Add dotenv-rails to Gemfile and bundle install
  2. Create file named .env at root of application
  3. Add Google credentials(GOOGLE_KEY=ID and GOOGLE_SECRET=Secret) to newly created .env file
  4. Add .env to .gitignore file to ensure you don't accidentally commit sensitive credentials
