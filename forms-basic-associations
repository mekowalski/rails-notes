Using the model ID
-Rewrite controller to accept a company_name/beer_style_name instead of ID
  eg:
  class BeersController < ApplicationController
    def create
      company = Company.find_or_create_by(name: params[:beer][company_name])
      Beer.create(name: params[:beer][:name], company: company)
    end
  end
^^^this will have to be anywhere for setting the company for a Beer, move logic to the model

app/models/beer.rb
class Beer < ActiveRecord::Base
  def company_name=(name)
    self.company = Company.find_or_create_by(name: name)
  end

  def company_name
    self.company ? self.company.name : nil
  end
end

 -Setter method, L14,  called whenever a Beer is initialized with a company_name field
 -Expand Beer.create(beer_params)

Beer.create({
  company_name: params[:beer][:company_name]
  name: params[:beer][:name]
})

-setter method intercepts the call to DB and instead shadowing the attr company_name by
  1. making sure the Company exists
  2. providing it in-memory for the Beer model

Controller Becomes simple again
def create
  Beer.create(beer_params)
end

private
def beer_params
  params.require(:beer).permit(:company_name, :name)
end

NEW FORM
*user can now enter company by name(instead of looking up ID)
<%= form_for @beer do |f| %>
  <%= f.label :company_name %>
  <%= f.text_field :company_name %>
  <%= f.text_field :name %>
  <%= f.submit %>
<% end %>

*this is how i will associate Company and BeerStyle with Beer, beer initialization*
SELECTING FROM EXISTING CATEGORIES
-use Collection Select helper to render <select> tag, creating drop down selection to pick company
-this way does lose ability for users to create their own company
<%= form_for @beer do |f| %>
  <%= f.collection_select :company_name, Company.all, :name, :name %>
  <%= f.text_field :name %>
  <%= f.submit %>
<% end %>


FLEXIBILITY
-ability for users to create or select existing option
-autocompletion with datalist
<%= form_for @beer do |f| %>
  <%= f.text_field :company_name, list: "companies_autocomplete" %>
  <datalist id="companies_autocomplete">
    <% Company.all.each do |company| %>
      <option value="<%= company.name %>">
    <% end %>
  </datalist>
  <textarea name="beer[name]"></textarea>
  <%= f.submit %>
<% end %>


UPDATING MULTIPLE ROWS
-how to let user specify may different beers to arrange
-Use array params
-Rails uses naming convention to submit an array of values to a controller
-When submitted, controller will have access to a beer_ids param, which is an array of strings
<%= form_for @company do |f| %>
  <input name="company[beer_ids][]">
  <input name="company[beer_ids][]">
  <input name="company[beer_ids][]">
  <input type="submit" value="Submit">
<% end %>

-Write a setter_method just like company_name
class Company < ActiveRecord::Base
   def beer_ids=(ids)
     ids.each do |id|
       beer = Beer.find(id)
       self.beers << beer
     end
   end
end

-Use same wiring in controller to set beer_ids from params
class CompaniesController < ApplicationController
  def create
    Company.create(company_params)
  end

  private

  def company_params
    params.require(:company).permit(:name, beer_ids: [])
  end
end
