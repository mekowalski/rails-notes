ActiveRecord Associations are an iconic Rails feature allowing devs to work with complex networks of related
  -models w/o having to wtire lines of SQL, as long as names line up

FOREIGN KEYS
-Columns referring to primary key of another table, compromised of model name of reference and _id
  eg: beers_id
-FK's are accessible through instance methods of same name
  eg: migration
  class AddCompanyIdToBeers < ActiveRecord::Migration
    def change
      change_table :beers do |t|
        t.integer :beer_styles_id
      end
    end
  end
*similar to AR query: Company.find(@beer.company_id)


MANY-TO-ONE RELATIONSHIPS
-Most common many-to-one relations are declared with belongs_to and has_many
-BELONGS_TO: Each Beer is associated with 1 Company
  eg:
  class Beer < ActiveRecord::Base
    belongs_to :company
  end

-HAS_MANY: Opposite direction where an object may be associated with 0, 1 or many instances
  eg:
  class Company < ActiveRecord::Base
    has_many :beers
  end
