ActiveRecord Associations are an iconic Rails feature allowing devs to work with complex networks of related
  -models w/o having to wtire lines of SQL, as long as names line up

FOREIGN KEYS
-Columns referring to primary key of another table, compromised of model name of reference and _id
  eg: beers_id
-FK's are accessible through instance methods of same name
  eg: migration
  class AddCompanyIdToBeers < ActiveRecord::Migration
    def change
      change_table :beers do |t|
        t.integer :beer_styles_id
      end
    end
  end
*similar to AR query: Company.find(@beer.company_id)


MANY-TO-ONE RELATIONSHIPS
-Most common many-to-one relations are declared with belongs_to and has_many
-BELONGS_TO: Each Beer is associated with 1 Company
  eg:
  class Beer < ActiveRecord::Base
    belongs_to :company
  end

-HAS_MANY: Opposite direction where an object may be associated with 0, 1 or many instances
  eg:
  class Company < ActiveRecord::Base
    has_many :beers
  end

ActiveRecord uses Inflector to switch between singular and plural forms of models
  NAME            DATA
  Model           Company
  Table           companies
  Foreign Key     company_id
  belongs_to      :company
  has_many        :companies(although this would :beers in the correct AR associations)


BUILDING NEW ITEM IN COLLECTION
-Association macros save the day
  eg:
  new_beer = @company.beer.build(name: 'New Beer')
  new_beer.save
  *build works like new but need to save in order to persist in DB*


SETTING SINGULAR ASSOCIATION
-Verbose was to create this association is:
  @beer.company = Company.new(name: 'Steamworks Brewing Co')
  *here, @beer.company is nil until company is defined, instead it prepends with:
  build_ then .save OR create_(DB persisted)*
  new_company = @beer.Build_company(name: 'Steamworks Brewing Co')
  new_company.save
