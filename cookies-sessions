Cookies: HTTP server asking browser to store a bit of data and retrieve that data later
  -Used for login, providing way to verify user once and remembering for the entire session
  -Without cookies, providing login information is needed for every server request
  -May also store other info such as shopping cart items, what ads have been shown

Fundamental Thinking
-When a user requests to see their account/profile/posts/shopping bag etc, how do you tell them apart from
 another user and make sure it's their correct request
eg: request flow
  -User adds a new entry to their list
   POST request to /list
  -Later, when User wants to see their list
   GET request to /list
  -What's included in HTTP request
    1. HTTP verb : get, post, put
    2. a path
    3. various headers

-HTTP servers commonly stateless, receive, process and return request of data
-GET requests usually encodes info in the patch
  eg: /lists/:list_id
  -Telling Rails to pull value id from request path and save it in params[:id] in controller

  def show
    @list = List.find(params[:list_id])
  end
  -this then loads that list from the DB and returns it as AR model object for views rendered

-Cookies are stored in browser, browser doesn't care about what's in the cookies
-Browsers store data and sends along info on future requests to server

USING COOKIES
-To store a reference of a User, create the instance then in response include:
  ==Server -> User Agent ==
  Set-Cookie: list_id=369
  -Can look at this HTTP header, get list_id and look it up using AR .find method

SECURITY CONCERNS
-Cookies are stored in plain text in browser
-In Chrome console (inspect tool), users may decide to delete/alter cookies
  *i can go to my github account, delete the cookie from Chrome console and i'd be logged out of Github*
-Arising issue is that a user may be able to see other accounts
