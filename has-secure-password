-Rails provides tools to store passwords relatively securely, if server is broken into, access to users'
 password won't occur

PASSWORD PROBLEMS
eg:
def create
  @user = User.find_by(username: params[:username])
  return head(:forbidden) unless params[:password] == @user.password
  session[:user_id] = @user.id
end

-When the user row loads, provided password will be checked for equal of password stored in the DB and if
 it's set user_id in the session
-Not secure to store all passwords in DB unecrypted

HASHING PASSWORDS
-store the hashes of passwords
-Hash: number computed by feeding string to a hash function
-Hashes have a property of producing the same number given the same input
eg:
def dumb_hash(input)
  input.bytes.reduce(:+)
end

-^^^function finds sum of the bytes comprising the string, given the same string will produce the same result

User Model and SessionsController
*beer app does not have a user moder to use this function*
class User < ActiveRecord::Base
  def password=(new_password)
    self.password_digest = dumb_hash(new_password)
  end

  def authenticate(password)
    return nil unless dumb_hash(password) == password_digest
    self
  end

  private
  def dumb_hash(input)
    input.bytes.reduce(:+)
  end
end

class SessionsController < ApplicationController
  def create
    user = User.find_by(username: params[:username])
    authenticate = user.try(:autenticate, params[:username])
    return head(:forbidden) unless authenticated
    @user = username
    session[:user_id] = @user.id
  end
end

*try: ActiveSupport method meaning if object != nil then object.some_method else nil end

-password_digest stores password hashes in DB
-Collision: occurs when similar strings has to similar values
-They're inevitable when writing a hash function, which produces either a 32-bit or 64-bit number
-Fortunately Ruby internally uses MurmurHash for all hash functions designed with quality of strings that
 are similar but the hash is significantly a different value
 *but Murmur isn't ideal!
