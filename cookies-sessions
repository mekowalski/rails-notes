Cookies: HTTP server asking browser to store a bit of data and retrieve that data later
  -Used for login, providing way to verify user once and remembering for the entire session
  -Without cookies, providing login information is needed for every server request
  -May also store other info such as shopping cart items, what ads have been shown

Fundamental Thinking
-When a user requests to see their account/profile/posts/shopping bag etc, how do you tell them apart from
 another user and make sure it's their correct request
eg: request flow
  -User adds a new entry to their list
   POST request to /list
  -Later, when User wants to see their list
   GET request to /list
  -What's included in HTTP request
    1. HTTP verb : get, post, put
    2. a path
    3. various headers

-HTTP servers commonly stateless, receive, process and return request of data
-GET requests usually encodes info in the patch
  eg: /lists/:list_id
  -Telling Rails to pull value id from request path and save it in params[:id] in controller

  def show
    @list = List.find(params[:list_id])
  end
  -this then loads that list from the DB and returns it as AR model object for views rendered

-Cookies are stored in browser, browser doesn't care about what's in the cookies
-Browsers store data and sends along info on future requests to server

USING COOKIES
-To store a reference of a User, create the instance then in response include:
  ==Server -> User Agent ==
  Set-Cookie: list_id=369
  -Can look at this HTTP header, get list_id and look it up using AR .find method

SECURITY CONCERNS
-Cookies are stored in plain text in browser
-In Chrome console (inspect tool), users may decide to delete/alter cookies
  *i can go to my github account, delete the cookie from Chrome console and i'd be logged out of Github*
-Arising issue is that a user may be able to see other accounts

RAILS TO THE RESCUE
-When cookies are set in Rails, manipulation doesn't occur with HTTP headers directly
-Sessions method available anywhere in Rails response cycle and behaves like a hash
eg:
  -set list_id
  session[:list_id] = @list.id

  -load list reference in session
  @list = session[:list_id]

-Can store any simple Ruby object in session
-Rails namages all session data in a single cookie named: _YOUR_RAILS_APP_NAME_session
  -serializes all key/pair values with session, converting them from Ruby object to a big string
  -with key/value set, Tails updates value of its session to a big string

-Rails signs the set cookies to prevent users from tampering them in config/secrets.yml
  *i can't find this in my config unfortunately. i have many other .yml files*
-Rails creates a signature for every cookie it sets and appends signature to the cookie preventing cookie
 tampering

TYING IT TOGETHER
-controller may have a method in which the user will add an item to a list
  def add_to_list
    // get item from the path
    @item = Item.find(params[:id])

    //load list from the session ore create a new empty list
    list = session[:list] || []
    list << @item.id

    //save the list in the session
    session[:list] = list
  end

-also common to wrap this in a helper method
-can be used in views and layouts
  class ApplicationController < ActionController::Base
    helper_method :current_list

    def current_list
      session[:list] || = []
    end
  end

-refactored controller
  def add_to_list
    @item = Item.find(params[:id])
    current_list < @item.id
  end
