-Rails is very pattern oriented
-Rails is a giant framework, level up from Sinatra
-Rack based server(config.ru helps with mounting rails app)

-Key Differences
  -Routing is DSL(domain specific language) separate from controllers
    routing is part of a routing file (config/routes.rb)
    define all routes and maps them to controllers#actions

  -controller actions are Ruby methods, no DSL
    controllers#actions become Ruby methods, not macros like in Sinatra

  -explicit and implicit view rendering
    an empty action in the controller will implicitly render(eg: dogs#show will automatically render)

  -instrumentation and generators
    Rails apps comes with an immense amount of instrumentation

  -ActionView
    Rails provides actionview helpers to automatically generate HTML instead of manually writing
    knows about Ruby, ActiveRecord, Rails pattern

  -Asset Pipeline
    for JavaScript and CSS

-Rails Gem
  -1 gem with 20 or more dependencies, mixture of many different frameworks
  -ActiveRecord: models
  -ActionController: controllers
  -ActionViews: views
  -Access to cli called Rails, to access parts of Rails stack

-App directory is where most of the code is created for the applications

-When in a rails directory, `rails` in the terminal is about instrumenting the current application

-What are the URLs of this application
-How is the user going to access the functionalities
-URLs are close to user, user manipulates application, the interface is URL centric(outside)
-Exact opposite of the application is the database(inside)
-Think both about URL and database, developing towards a middle ground place
  URLs--> Routes--> Controller#Actions--> Models--> Database--> Views

-Request Cycle
  what are the chain of events for every request
  begin with outside(url) and work towards inside(database)

-Rails helps generate(create) skeleton code for when you need a new component
