ACTIVERECORD MODELS AND RAILS

ACTIVERECORD
-ORM: Object Relational Mapping system, enables app to manage data in method driven structure
-Rails utilizes the built-in ORM of ActiveRecod to model aspects of application
-ORM enables you to run queries, add records & perform all traditional db processes without writing SQL manually
eg: SELECT * FROM posts (SQL)
    Post.all (ActiveRecord)


ACTIVERECORD MODELS
-model files create an organized layer of abstraction for data
-model file is a Ruby class inherited from ActiveRecord::Base class (inherit methods in working db)
-also can treat like a Ruby class, creating methods, data attributes, etc
-typical model files contain: custom scopes, model instance methods, default settings for db columns,
validations, model associations, callbacks, custom algorithms

*data aspect of application can work separately from view and data flow logic*

`rake db:migrate`(i've done this with `rails db:migrate`) updates model with a new table and its given
attributes

-best practice, convention to have controller and view files following the proper name of the model
-helps with MVC associations and readable files/code
eg: Dog
    Model: app/models/dog.rb
    Controller: app/controllers/dogs_controller.rb
    Views: app/views/dogs/all the other files for related Dog views
