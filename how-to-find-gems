Gems previously used(to name a few):
  -RSpec testing
  -Bycrpt for secure password
  -OmniAuth for login via third party
  -Spring to keep continuous application running in background
  -Rails for all things rails, to create a full-stack framework for applications
  -Sqlite as a database for ActiveRecord


DO YOU NEED A GEM
-Gems are available for use in everyone's projects, setting Ruby apart from other languages
-A side effect is: Gem Madness-where gems are used to solve every problem without consideration of actual gem
 usage

WHERE TO LOOK
-In console: `gem search` command takes a regular expression(regex) that is handy when a name or part of a
 name of a gem is known
-The Ruby Toolbox is a great site that collects and sorts rems by rank of:
 downloads, releases and active commits
-TRT is comprehensive to sift through, great for exploring all options
-Awesome Ruby and Awesome Rails Gem are 2 open sources, community-maintained lists of the most popular gems
 for Ruby and Rails by category


QUALITIES OF CHOOSING A GEM
-Adding a gem to a project also takes on dependency of outside code
  -dependencies may have security issues, bugs, compatibility issues

How Popular Is It
-A more popular gem is a more maintained gem
-Also able to find more help running into issues
-A simple guideline to test gem popularity
1. look it up on Ruby Toolbox, checkout downloads made, how recent commits are, how many versions there are
2. see if it's also on Awesome Ruby and Awesome Rails Gem
3. Google gem name and see what results, prominently how recently it was update, checkout tutorials and
   name errors
4. Search StackOverflow for the gem regarding what people say of that gem
5. Search Github usage of gem, read the documentation or code and search its methods or classes

How Well-Maintained Is It
1. Read code for consistent structure as expected, is it easy to follow, understand
2. Look for documentation, is it commonly documented, descriptive, example-provided README or bare minimum
3. What are the issues and PRs, how long are they open, how active are committees with issues, are there
   problems with specific version that isn't or is solved?
4. Look for tests, are there /test or /spec DIRs, how many tests, is there a continuous integration

-Gems are powerful, great and crucial for developers but with some elbow grease, you'll understand what gems
 are actually necessary to create your project
